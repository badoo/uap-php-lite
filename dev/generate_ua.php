<?php
/*
 * Generate a file with regular expressions to detect browser/os/device
 */

require "./spyc/Spyc.php";
// url to uap-core regexes.yaml
//$regexes_yaml_url = "https://raw.githubusercontent.com/ua-parser/uap-core/master/regexes.yaml";
$regexes_yaml_url = "./uap-core/regexes.yaml";

function errormsg($msg)
{
    error_log($msg, 3, 'php://stderr');
}

function check_re($regex)
{
    if (strpos($regex, '~') !== false) {
        errormsg("Error - regex contains tilda `~` symbol, can't use as php regex - " . $regex);
        return false;
    }
    return true;
}

function get_groups($regex)
{
    // find matching groups in regular expression
    $re = '~(?<!(?<!\\\\)\\\\)\\(((?!\\?:).*?(?<!(?<!\\\\)\\\\))\\)~';

    $matches_num = preg_match_all($re, $regex);

    if ($matches_num === false) {
        errormsg("Error - can't match: " . $regex . "\n");
        return false;
    }

    return $matches_num;
}

function generate_ua($regexes)
{
    global $re;
    $result = [];
    foreach ($regexes as $regex) {
        if (!check_re($regex['regex'])) {
            continue;
        }
        $matches_num = get_groups($regex['regex']);
        if ($matches_num === false) {
            continue;
        }

        $replace = array_filter(
            [
                isset($regex['family_replacement']) ? $regex['family_replacement'] : ($matches_num > 0 ? '$1' : ''),
                isset($regex['v1_replacement']) ? $regex['v1_replacement'] : ($matches_num > 1 ? '$2' : ''),
                isset($regex['v2_replacement']) ? $regex['v2_replacement'] : ($matches_num > 2 ? '$3' : ''),
                isset($regex['v3_replacement']) ? $regex['v3_replacement'] : ($matches_num > 3 ? '$4' : ''),
            ]
        );

        $result["~" . $regex['regex'] . "~"] = implode(',', $replace);
    }
    errormsg("Added " . count($result) . " UserAgent\n");
    return $result;
}

function generate_os($regexes)
{
    global $re;
    $result = [];
    foreach ($regexes as $regex) {
        if (!check_re($regex['regex'])) {
            continue;
        }
        $matches_num = get_groups($regex['regex']);
        if ($matches_num === false) {
            continue;
        }

        $replace = array_filter(
            [
                isset($regex['os_replacement']) ? $regex['os_replacement'] : ($matches_num > 0 ? '$1' : ''),
                isset($regex['os_v1_replacement']) ? $regex['os_v1_replacement'] : ($matches_num > 1 ? '$2' : ''),
                isset($regex['os_v2_replacement']) ? $regex['os_v2_replacement'] : ($matches_num > 2 ? '$3' : ''),
                isset($regex['os_v3_replacement']) ? $regex['os_v3_replacement'] : ($matches_num > 3 ? '$4' : ''),
            ]
        );

        $result["~" . $regex['regex'] . "~"] = implode(',', $replace);
    }
    errormsg("Added " . count($result) . " OS\n");
    return $result;
}

function generate_device($regexes)
{
    $result = [];
    foreach ($regexes as $regex) {
        if (!check_re($regex['regex'])) {
            continue;
        }
        $result["~" . $regex['regex'] . "~" . (isset($regex['regex_flag']) ? $regex['regex_flag'] : '')] = isset($regex['device_replacement']) ? $regex['device_replacement'] : ($regex['brand_replacement'] . " " . $regex['model_replacement']);
    }
    errormsg("Added " . count($result) . " Device\n");
    return $result;
}

function generate($regexes_yaml_url, $output_filename)
{
    $data_yaml = file_get_contents($regexes_yaml_url);
    if ($data_yaml === false) {
        errormsg("Can't download $regexes_yaml_url");
        exit(1); 
    }

    $data = spyc_load($data_yaml);
    if (empty($data)) {
        errormsg("Can't parse yaml data from $regexes_yaml_url");
        exit(1);
    }

    $result = [
        'ua' => generate_ua($data['user_agent_parsers']),
        'os' => generate_os($data['os_parsers']),
        'device' => generate_device($data['device_parsers']),
    ];

    $output = "<?php\n/* AUTOGENERATED */\n";
    $output .= 'return ' . var_export($result, 1) . ";\n";

    file_put_contents($output_filename, $output);
}

generate($regexes_yaml_url, $argv[1]);

